/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import locadoraveiculo.Moto;
import metodostelas.CarregarTabela;
import metodostelas.GerenciarBotoes;
import metodostelas.GerenciarCampos;
import static telas.CadastroCliente.listaClientes;

/**
 *
 * @author alexandre
 */
public class CadastroMoto extends javax.swing.JFrame {
    
    //variavel para indicar editar ou novo quando for salvar
    String botao;
    
    //array de motos
    static ArrayList<Moto> listaMotos;
    
    /**
     * Creates new form CadastroMoto
     */
    public CadastroMoto() {
        initComponents();
        
        //criar lista
        listaMotos = new ArrayList();

        //Maximizar a tela
        this.setExtendedState(MAXIMIZED_BOTH);

        //desabilitar campos de texto
        GerenciarCampos.camposDefault(txtPlacaMoto, txtMarcaMoto, 
                    txtModeloMoto, txtCorMoto, txtValorDiariaMoto, 
                    txtQtdCilindradasMoto, rdoBtnDisponivel, rdoBtnIndisponivel);
        
        //desabilitar e habilitar botoes
        GerenciarBotoes.iniciarTela(btnNovoMoto, btnSalvarMoto, btnEditarMoto, 
                btnCancelarMoto, btnPesquisarMoto, btnExcluirMoto, btnOkMoto);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupDisponibilidade = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lblPlacaMoto = new javax.swing.JLabel();
        lblMarcaMoto = new javax.swing.JLabel();
        lblModeloMoto = new javax.swing.JLabel();
        lblCorMoto = new javax.swing.JLabel();
        lblValorDiaria = new javax.swing.JLabel();
        lblQtdCilindrdas = new javax.swing.JLabel();
        txtPlacaMoto = new javax.swing.JTextField();
        txtMarcaMoto = new javax.swing.JTextField();
        txtModeloMoto = new javax.swing.JTextField();
        txtCorMoto = new javax.swing.JTextField();
        txtValorDiariaMoto = new javax.swing.JTextField();
        txtQtdCilindradasMoto = new javax.swing.JTextField();
        lblEstaDisponivelMoto = new javax.swing.JLabel();
        rdoBtnDisponivel = new javax.swing.JRadioButton();
        rdoBtnIndisponivel = new javax.swing.JRadioButton();
        btnOkMoto = new javax.swing.JButton();
        btnVoltarFromMoto2Menu = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMotoLista = new javax.swing.JTable();
        btnNovoMoto = new javax.swing.JButton();
        btnSalvarMoto = new javax.swing.JButton();
        btnEditarMoto = new javax.swing.JButton();
        btnCancelarMoto = new javax.swing.JButton();
        btnExcluirMoto = new javax.swing.JButton();
        btnPesquisarMoto = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de moto");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Cadastro de Moto"));

        lblPlacaMoto.setText("Placa");

        lblMarcaMoto.setText("Marca");

        lblModeloMoto.setText("Modelo");

        lblCorMoto.setText("Cor");

        lblValorDiaria.setText("Valor Diária");

        lblQtdCilindrdas.setText("Cilindradas");

        lblEstaDisponivelMoto.setText("Disponibilidade");

        btnGroupDisponibilidade.add(rdoBtnDisponivel);
        rdoBtnDisponivel.setSelected(true);
        rdoBtnDisponivel.setText("Disponível");

        btnGroupDisponibilidade.add(rdoBtnIndisponivel);
        rdoBtnIndisponivel.setText("Indisponível");

        btnOkMoto.setText("OK");
        btnOkMoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkMotoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblEstaDisponivelMoto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rdoBtnDisponivel)
                        .addGap(42, 42, 42)
                        .addComponent(rdoBtnIndisponivel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPlacaMoto)
                            .addComponent(lblMarcaMoto)
                            .addComponent(lblModeloMoto)
                            .addComponent(lblCorMoto)
                            .addComponent(lblValorDiaria)
                            .addComponent(lblQtdCilindrdas))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtPlacaMoto, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnOkMoto))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtQtdCilindradasMoto, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                                    .addComponent(txtValorDiariaMoto, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCorMoto, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMarcaMoto, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtModeloMoto, javax.swing.GroupLayout.Alignment.LEADING))
                                .addContainerGap())))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPlacaMoto)
                    .addComponent(txtPlacaMoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOkMoto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMarcaMoto)
                    .addComponent(txtMarcaMoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblModeloMoto)
                    .addComponent(txtModeloMoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCorMoto)
                    .addComponent(txtCorMoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblValorDiaria)
                    .addComponent(txtValorDiariaMoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblQtdCilindrdas)
                    .addComponent(txtQtdCilindradasMoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEstaDisponivelMoto)
                    .addComponent(rdoBtnDisponivel)
                    .addComponent(rdoBtnIndisponivel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnVoltarFromMoto2Menu.setText("Voltar");
        btnVoltarFromMoto2Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarFromMoto2MenuActionPerformed(evt);
            }
        });

        tblMotoLista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Placa", "Marca", "Modelo", "Cor", "Valor Diária", "Cilindradas", "Disponibilidade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMotoLista.getTableHeader().setReorderingAllowed(false);
        tblMotoLista.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMotoListaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMotoLista);

        btnNovoMoto.setText("Novo");
        btnNovoMoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoMotoActionPerformed(evt);
            }
        });

        btnSalvarMoto.setText("Salvar");
        btnSalvarMoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarMotoActionPerformed(evt);
            }
        });

        btnEditarMoto.setText("Editar");
        btnEditarMoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarMotoActionPerformed(evt);
            }
        });

        btnCancelarMoto.setText("Cancelar");
        btnCancelarMoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarMotoActionPerformed(evt);
            }
        });

        btnExcluirMoto.setText("Excluir");
        btnExcluirMoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirMotoActionPerformed(evt);
            }
        });

        btnPesquisarMoto.setText("Pesquisar");
        btnPesquisarMoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarMotoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnNovoMoto)
                .addGap(18, 18, 18)
                .addComponent(btnSalvarMoto)
                .addGap(18, 18, 18)
                .addComponent(btnEditarMoto)
                .addGap(18, 18, 18)
                .addComponent(btnCancelarMoto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE)
                .addComponent(btnPesquisarMoto)
                .addGap(18, 18, 18)
                .addComponent(btnExcluirMoto))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnVoltarFromMoto2Menu, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNovoMoto)
                    .addComponent(btnSalvarMoto)
                    .addComponent(btnEditarMoto)
                    .addComponent(btnCancelarMoto)
                    .addComponent(btnExcluirMoto)
                    .addComponent(btnPesquisarMoto))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnVoltarFromMoto2Menu)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnVoltarFromMoto2MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarFromMoto2MenuActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnVoltarFromMoto2MenuActionPerformed

    private void btnSalvarMotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarMotoActionPerformed
        
        if(txtPlacaMoto.getText().equals("") ||
                txtMarcaMoto.getText().equals("") || txtModeloMoto.getText().equals("") ||
                txtCorMoto.getText().equals("") || txtValorDiariaMoto.getText().equals("") ||
                txtQtdCilindradasMoto.getText().equals("") || 
                (rdoBtnDisponivel.isSelected() == false && rdoBtnIndisponivel.isSelected() == false))   {
                
            JOptionPane.showMessageDialog(null, "Todos os campos devem ser preenchidos", "Messagem", JOptionPane.PLAIN_MESSAGE);
            
            txtPlacaMoto.requestFocus();
            
        } else {
            
            if (botao.equals("novo"))   {
                    
            boolean estaDisponivel = true;
            if (rdoBtnDisponivel.isSelected())  {
                estaDisponivel = true;
            } else  if (rdoBtnIndisponivel.isSelected())    {
                estaDisponivel = false;
            } else {
                JOptionPane.showMessageDialog(null, "É preciso selecionar a disponibilidade", "Messagem", JOptionPane.PLAIN_MESSAGE);
            }
            
            //cadastrar moto
            listaMotos.add(Moto.cadastrarMoto(txtPlacaMoto.getText(),
                                    txtMarcaMoto.getText(), txtModeloMoto.getText(), txtCorMoto.getText(), 
                                    Double.parseDouble(txtValorDiariaMoto.getText()), estaDisponivel, 
                                    Integer.parseInt(txtQtdCilindradasMoto.getText())));
            
            JOptionPane.showMessageDialog(null, "Moto cadastrada com sucesso!", "Messagem", JOptionPane.INFORMATION_MESSAGE);
            
            } else if (botao.equals("editar"))  {
                
                int index = tblMotoLista.getSelectedRow();
                
                boolean estaDisponivel = true;
                if (rdoBtnDisponivel.isSelected())  {
                    estaDisponivel = true;
                } else  if (rdoBtnIndisponivel.isSelected())    {
                    estaDisponivel = false;
                } else {
                    JOptionPane.showMessageDialog(null, "É preciso selecionar a disponibilidade", "Messagem", JOptionPane.PLAIN_MESSAGE);
                }
                
                //editar moto
                Moto.editarMoto(listaMotos.get(index), txtPlacaMoto.getText(),
                                    txtMarcaMoto.getText(), txtModeloMoto.getText(), txtCorMoto.getText(), 
                                    Double.parseDouble(txtValorDiariaMoto.getText()), estaDisponivel, 
                                    Integer.parseInt(txtQtdCilindradasMoto.getText()));
                
                JOptionPane.showMessageDialog(null, "Alterações salvas com sucesso!", "Messagem", JOptionPane.INFORMATION_MESSAGE);
                
            }
            
            
            //carregar os dados na tabela de clientes
            CarregarTabela.tabelaMotoLista(tblMotoLista, listaMotos);
            
            //limpar os campos
            GerenciarCampos.limparTodosCampos(txtPlacaMoto, txtMarcaMoto, 
                        txtModeloMoto, txtCorMoto, txtValorDiariaMoto, 
                        txtQtdCilindradasMoto, rdoBtnDisponivel, rdoBtnIndisponivel);
            
            txtPlacaMoto.requestFocus();
            
        }
    }//GEN-LAST:event_btnSalvarMotoActionPerformed

    private void btnNovoMotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoMotoActionPerformed
        
        botao = "novo";
        
        //desabilitar ou habilitar campos de texto
        GerenciarCampos.opcaoNovoEditar(txtPlacaMoto, txtMarcaMoto, 
                    txtModeloMoto, txtCorMoto, txtValorDiariaMoto, 
                    txtQtdCilindradasMoto, rdoBtnDisponivel, rdoBtnIndisponivel);
        
        //desabilitar e habilitar botoes
        GerenciarBotoes.botaoNovoEditar(btnNovoMoto, btnSalvarMoto, btnEditarMoto, 
                btnCancelarMoto, btnPesquisarMoto, btnExcluirMoto, btnOkMoto);
        
        //limpar os campos
        GerenciarCampos.limparTodosCampos(txtPlacaMoto, txtMarcaMoto, 
                    txtModeloMoto, txtCorMoto, txtValorDiariaMoto, 
                    txtQtdCilindradasMoto, rdoBtnDisponivel, rdoBtnIndisponivel);
        
        txtPlacaMoto.requestFocus();
        
    }//GEN-LAST:event_btnNovoMotoActionPerformed

    private void btnEditarMotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarMotoActionPerformed
        
        botao = "editar";
        
        //desabilitar ou habilitar campos de texto
        GerenciarCampos.opcaoNovoEditar(txtPlacaMoto, txtMarcaMoto, 
                    txtModeloMoto, txtCorMoto, txtValorDiariaMoto, 
                    txtQtdCilindradasMoto, rdoBtnDisponivel, rdoBtnIndisponivel);
        
        //desabilitar e habilitar botoes
        GerenciarBotoes.botaoNovoEditar(btnNovoMoto, btnSalvarMoto, btnEditarMoto, 
                btnCancelarMoto, btnPesquisarMoto, btnExcluirMoto, btnOkMoto);
        
        txtPlacaMoto.requestFocus();
        
    }//GEN-LAST:event_btnEditarMotoActionPerformed

    private void btnCancelarMotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarMotoActionPerformed
        
        //desabilitar campos de texto
        GerenciarCampos.camposDefault(txtPlacaMoto, txtMarcaMoto, 
                    txtModeloMoto, txtCorMoto, txtValorDiariaMoto, 
                    txtQtdCilindradasMoto, rdoBtnDisponivel, rdoBtnIndisponivel);
        
        //desabilitar ou habilitar campos de texto
        GerenciarCampos.limparTodosCampos(txtPlacaMoto, txtMarcaMoto, 
                    txtModeloMoto, txtCorMoto, txtValorDiariaMoto, 
                    txtQtdCilindradasMoto, rdoBtnDisponivel, rdoBtnIndisponivel);
        
        //desabilitar e habilitar botoes
        GerenciarBotoes.botaoCancelar(btnNovoMoto, btnSalvarMoto, btnEditarMoto, 
                btnCancelarMoto, btnPesquisarMoto, btnExcluirMoto, btnOkMoto);
        
    }//GEN-LAST:event_btnCancelarMotoActionPerformed

    private void btnExcluirMotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirMotoActionPerformed
        
        int index = tblMotoLista.getSelectedRow(); 
        
        if (index >= 0 && index < listaMotos.size()){
            listaMotos.remove(index);
        }
        
        //carregar os dados na tabela de clientes
        CarregarTabela.tabelaMotoLista(tblMotoLista, listaMotos);
        
        //limpar os campos
        GerenciarCampos.limparTodosCampos(txtPlacaMoto, txtMarcaMoto, 
                    txtModeloMoto, txtCorMoto, txtValorDiariaMoto, 
                    txtQtdCilindradasMoto, rdoBtnDisponivel, rdoBtnIndisponivel);
        
        //desabilitar e habilitar botoes
        GerenciarBotoes.iniciarTela(btnNovoMoto, btnSalvarMoto, btnEditarMoto, 
                btnCancelarMoto, btnPesquisarMoto, btnExcluirMoto, btnOkMoto);
        
    }//GEN-LAST:event_btnExcluirMotoActionPerformed

    private void btnPesquisarMotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarMotoActionPerformed
        
        if (listaMotos.isEmpty())   {
            
            JOptionPane.showMessageDialog(null, "Nenhuma moto cadastrado para pesquisa!", "Messagem", JOptionPane.PLAIN_MESSAGE);
            
        } else {
        
            //limpar os campos
            GerenciarCampos.limparTodosCampos(txtPlacaMoto, txtMarcaMoto, 
                    txtModeloMoto, txtCorMoto, txtValorDiariaMoto, 
                    txtQtdCilindradasMoto, rdoBtnDisponivel, rdoBtnIndisponivel);
        
            //desabilitar e habilitar botoes
            GerenciarBotoes.botaoPesquisar(btnNovoMoto, btnSalvarMoto, btnEditarMoto, 
                btnCancelarMoto, btnPesquisarMoto, btnExcluirMoto, btnOkMoto);
        
            //desabilitar ou habilitar campos de texto
            GerenciarCampos.opcaoPesquisar(txtPlacaMoto, txtMarcaMoto, 
                    txtModeloMoto, txtCorMoto, txtValorDiariaMoto, 
                    txtQtdCilindradasMoto, rdoBtnDisponivel, rdoBtnIndisponivel);
        
            txtPlacaMoto.requestFocus();
            
        }
    }//GEN-LAST:event_btnPesquisarMotoActionPerformed

    private void btnOkMotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkMotoActionPerformed
        
        if (txtPlacaMoto.getText().equals(""))   {
            JOptionPane.showMessageDialog(null, "Nenhuma placa informado para pesquisa!", "Messagem", JOptionPane.PLAIN_MESSAGE);
        } else {
            Moto moto;
            
            String placaPesquisa = txtPlacaMoto.getText();
            
            String placa = "";
            String marca = "";
            String modelo = "";
            String cor = "";
            String valorDiaria = "";
            String estaDisponivel = "";
            String qtdCilindradas = "";
            
            for (int i = 0; i < listaMotos.size(); i++)  {
                
                moto = listaMotos.get(i);
                
                if (placaPesquisa.equals(moto.getPlaca()))   {
                    
                    placa = String.valueOf(moto.getPlaca());
                    marca = String.valueOf(moto.getMarca());
                    modelo = String.valueOf(moto.getModelo());
                    cor = String.valueOf(moto.getCor());
                    valorDiaria = String.valueOf(moto.getValorDiaria());
                    estaDisponivel = String.valueOf(moto.getEstaDisponivel());
                    qtdCilindradas = String.valueOf(moto.getQtdCilindradas());
                    
                }
            }
            
            if (placaPesquisa.equals(""))  {
                
                JOptionPane.showMessageDialog(null, "Não existe moto cadastrada para esta placa!", "Messagem", JOptionPane.PLAIN_MESSAGE);
            
                //limpar os campos
                GerenciarCampos.limparTodosCampos(txtPlacaMoto, txtMarcaMoto, 
                    txtModeloMoto, txtCorMoto, txtValorDiariaMoto, 
                    txtQtdCilindradasMoto, rdoBtnDisponivel, rdoBtnIndisponivel);
                
            } else  {
            
                txtPlacaMoto.setText(placa);
                txtMarcaMoto.setText(marca); 
                txtModeloMoto.setText(modelo);
                txtCorMoto.setText(cor);
                txtValorDiariaMoto.setText(valorDiaria);
                txtQtdCilindradasMoto.setText(qtdCilindradas);
                
                if (estaDisponivel.equals("true")) {
                    rdoBtnDisponivel.isSelected();
                } else if (estaDisponivel.equals("false")) {
                    rdoBtnIndisponivel.isSelected();
                }

            }
            
            txtPlacaMoto.selectAll();
            txtPlacaMoto.requestFocus();
            
        }
    }//GEN-LAST:event_btnOkMotoActionPerformed

    private void tblMotoListaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMotoListaMouseClicked
        
        int index = tblMotoLista.getSelectedRow();   
        
        if (index >= 0 && index < listaMotos.size()) {
            Moto moto = listaMotos.get(index);
            
            txtPlacaMoto.setText(String.valueOf(moto.getPlaca()));
            txtMarcaMoto.setText(String.valueOf(moto.getMarca()));
            txtModeloMoto.setText(String.valueOf(moto.getModelo()));
            txtCorMoto.setText(String.valueOf(moto.getCor()));
            txtValorDiariaMoto.setText(String.valueOf(moto.getValorDiaria()));
            txtQtdCilindradasMoto.setText(String.valueOf(moto.getQtdCilindradas()));
            
            boolean estaDisponivel = moto.getEstaDisponivel();
            
            if (estaDisponivel == true) {
                rdoBtnDisponivel.isSelected();
            } else if (estaDisponivel == false) {
                rdoBtnIndisponivel.isSelected();
            }
        }
        
        //desabilitar e habilitar botoes
        GerenciarBotoes.itemTabela(btnNovoMoto, btnSalvarMoto, btnEditarMoto, 
                btnCancelarMoto, btnPesquisarMoto, btnExcluirMoto, btnOkMoto);
        
        //desabilitar campos de texto
        GerenciarCampos.camposDefault(txtPlacaMoto, txtMarcaMoto, 
                    txtModeloMoto, txtCorMoto, txtValorDiariaMoto, 
                    txtQtdCilindradasMoto, rdoBtnDisponivel, rdoBtnIndisponivel);
    }//GEN-LAST:event_tblMotoListaMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroMoto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroMoto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroMoto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroMoto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroMoto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelarMoto;
    private javax.swing.JButton btnEditarMoto;
    private javax.swing.JButton btnExcluirMoto;
    private javax.swing.ButtonGroup btnGroupDisponibilidade;
    private javax.swing.JButton btnNovoMoto;
    private javax.swing.JButton btnOkMoto;
    private javax.swing.JButton btnPesquisarMoto;
    private javax.swing.JButton btnSalvarMoto;
    private javax.swing.JButton btnVoltarFromMoto2Menu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCorMoto;
    private javax.swing.JLabel lblEstaDisponivelMoto;
    private javax.swing.JLabel lblMarcaMoto;
    private javax.swing.JLabel lblModeloMoto;
    private javax.swing.JLabel lblPlacaMoto;
    private javax.swing.JLabel lblQtdCilindrdas;
    private javax.swing.JLabel lblValorDiaria;
    private javax.swing.JRadioButton rdoBtnDisponivel;
    private javax.swing.JRadioButton rdoBtnIndisponivel;
    private javax.swing.JTable tblMotoLista;
    private javax.swing.JTextField txtCorMoto;
    private javax.swing.JTextField txtMarcaMoto;
    private javax.swing.JTextField txtModeloMoto;
    private javax.swing.JTextField txtPlacaMoto;
    private javax.swing.JTextField txtQtdCilindradasMoto;
    private javax.swing.JTextField txtValorDiariaMoto;
    // End of variables declaration//GEN-END:variables
}
